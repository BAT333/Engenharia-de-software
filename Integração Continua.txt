
-----------------------------Entendendo o problema
O software na atualidade não é criado a partir de um único desenvolvedor, as equipes são multifuncionais que alterarão a mesma base de código.

Cada desenvolvedor terá o seu código local em sua máquina, embora haja um repositório compartilhado. Muitas vezes o desenvolvedor deverá fazer alterações solicitadas pelo cliente, corrigir bugs e assim por diante.

As alterações, inicialmente, são feitas no código local de cada desenvolvedor e só então deverão ser aplicadas no repositório compartilhado. Neste momento é que temos o ponto crítico.

É comum que a sincronização da cópia local com o repositório demore, e então esta etapa é feita normalmente ao fim do processo de desenvolvimento.


versionamento de codigo, o problema seria que cada pessoa tem mesmo codigo fazendo diferentes modificação
e na hora de jogar tudo para deploy, dar erro 
integração continua, por ecemplo se atrasar o deploy pode fazer com que as outras areas se atrase ou atrapalha des do testes
ate area de deploy entre outras, pode aparece incopatipilidade 

Integração Contínua (CI) é uma prática de desenvolvimento que exige que os desenvolvedores integrem código em um repositório compartilhado várias vezes ao dia

-------------------------------------------------------Sistema de controle de versão

O MAIS FAMOSO HJ EM DIA É GIT 
O Git é o mais popular em integração hoje em dia, mas não precisamos utiliza-lo, basta que tenhamos algum modelo de controle de versão de nossa escolha.

A ferramenta em si não importa, mas o que devemos inserir em nosso sistema de controle? De maneira geral, deve conter tudo aquilo que é necessário para a construção do projeto.

código
scripts
migrações, schemas
IDE Configs


------------------------------------------------------Organização dos repositórios
1- PARA CADA PROJETO UM REPOSITORYIO ->Multi-repo
2- UM REPOSITORIO GIGANTE PARA UM UNICO PROJETO, EMPRESAS GRANDES COM MUITOS PROJETOS ESCOLHERAM ISSO ->MONO-REPO

-------------------------------------------------------O que são Branching Models?
Os modelos de ramificação (branching models) são usados no Git para permitir que os desenvolvedores 
trabalhem com uma cópia do código sem modificar a versão existente. As ramificações são como uma bifurcação 
do código-fonte que cria uma linha independente de desenvolvimento.
------------------------------------------------------Comparando Modelos

- Temporários (branches locais) São branches localizados apenas na máquina local e deverão se extiguir, são utilizados para organizar fluxos de trabalho e depois realizar o commit.

- Feature Branches São utilizados para implementar funcionalidades ou orientar tarefas.

- Historical Branches (master e develop) As alterações ficam organizadas em commits baseados na cronologia no caso de um projeto de software.

- Environment Branches (Staging e Production)] Existem branches que são baseados no ambiente, isto é, em que espaço é realizado o deploy.

- Maintenance Branches (Release e Hotfix) Temos, ainda, os branches de manutenção do sistema.


------------------------------------------------------Branch by abstraction
Ramificação por Abstração (BBA)

Branch by Abstraction (BBA) é uma técnica de desenvolvimento de software que enfatiza a criação de uma separação clara 
entre diferentes preocupações ou camadas de uma aplicação. Ela promove modularidade, reutilização e manutenibilidade 
ao encapsular funcionalidades relacionadas dentro de módulos ou branches bem definidos.

Princípios-chave:

Separação de preocupações: cada ramificação deve se concentrar em um aspecto distinto do aplicativo, evitando o acoplamento rígido entre funcionalidades não relacionadas.
Abstração: Crie interfaces abstratas que definam o comportamento dos módulos, ocultando seus detalhes de implementação interna.
Encapsulamento: Encapsule dados e métodos relacionados dentro de módulos, controlando o acesso a eles.
Modularidade: divida o aplicativo em módulos menores e independentes que podem ser desenvolvidos, testados e modificados separadamente.
Reutilização: Projete módulos para serem reutilizáveis ​​em diferentes contextos, reduzindo o esforço de desenvolvimento e melhorando a qualidade do código.


Benefícios do BBA:

Maior manutenibilidade: alterações em um módulo têm menos probabilidade de afetar outros, tornando a base de código mais fácil de manter e atualizar.
Reutilização aprimorada: módulos bem projetados podem ser reutilizados em vários projetos, economizando tempo e esforço de desenvolvimento.
Maior capacidade de teste: cada módulo pode ser testado de forma independente, melhorando a qualidade geral e a confiabilidade do aplicativo.
Melhor escalabilidade: o BBA facilita o dimensionamento do aplicativo adicionando ou removendo módulos conforme necessário.
Melhor legibilidade: código bem estruturado e modular é mais fácil de entender e manter.
Melhores práticas para aplicar o BBA:

Identifique abstrações: defina claramente os limites entre diferentes preocupações dentro do seu aplicativo.
Crie interfaces bem definidas: projete interfaces claras e concisas para cada módulo, especificando os métodos e dados que podem ser acessados.
Encapsule detalhes de implementação: oculte o funcionamento interno dos módulos para evitar acoplamento rígido e promover a reutilização.
Teste módulos de forma independente: escreva testes de unidade para cada módulo para garantir sua correção e confiabilidade.
Refatore o código: refatore continuamente seu código para melhorar sua estrutura, legibilidade e manutenibilidade.
Exemplos de BBA na prática:

Arquitetura em camadas: separação do aplicativo em camadas, como apresentação, lógica de negócios e acesso a dados.
Desenvolvimento baseado em componentes: criação de componentes reutilizáveis ​​que podem ser combinados para criar diferentes aplicativos.
Design orientado a domínio (DDD): Modelagem do domínio do aplicativo como um conjunto de objetos e seus relacionamentos, promovendo abstração e encapsulamento.
Considerações adicionais:

Trade-offs: Embora o BBA ofereça muitos benefícios, ele também pode introduzir complexidade e overhead adicionais. Avalie cuidadosamente os trade-offs entre os benefícios e os custos de implementar o BBA em seu contexto específico.
Ferramentas e técnicas: considere usar ferramentas e técnicas como injeção de dependência e padrões de design para dar suporte eficaz ao BBA.
Melhoria Contínua: BBA é um processo contínuo. Revise regularmente sua base de código e refatore-a para garantir que ela continue a aderir aos princípios de abstração e modularidade.





------------------------------------------------------------------------Merge e Rebase
Merge e Rebase são duas estratégias comuns usadas no Git para integrar mudanças de um branch para outro. Embora ambos alcancem o mesmo objetivo, eles têm abordagens e implicações distintas.

Mesclar
Como funciona:
Cria um novo commit que combina as alterações de ambas as ramificações.
Preserva a história de ambos os ramos.
Quando usar:
Quando você deseja manter um registro claro de todas as fusões no histórico do seu projeto.
Quando você está trabalhando em um branch de recurso e quer mesclá-lo de volta ao branch principal.
Uma raposa
Como funciona:
Repete os commits de uma ramificação para outra, criando novos commits com as mesmas alterações.
Reescreve o histórico do projeto, fazendo com que pareça que as alterações foram feitas em uma única sequência linear.
Quando usar:
Quando você deseja manter um histórico de projeto limpo e linear.
Quando você está trabalhando em um branch de recurso e quer evitar conflitos de mesclagem.
Principais diferenças:

Recurso	Mesclar	Uma raposa
História	Preserva a história	Reescreve a história
Mesclar confirmações	Cria commits de mesclagem	Nenhum commit de mesclagem
Conflitos	Pode introduzir conflitos de mesclagem	Pode evitar conflitos de mesclagem, mas pode exigir push forçado

Exportar para as Planilhas
Escolhendo a estratégia certa:

A melhor estratégia depende das necessidades e preferências específicas do seu projeto. Aqui estão alguns fatores a serem considerados:

Histórico do projeto: se você valoriza um histórico claro e linear, o rebase pode ser uma boa escolha.
Colaboração: se você estiver trabalhando com uma equipe, a fusão pode ser mais fácil de gerenciar, pois preserva o histórico de cada ramificação.
Resolução de conflitos: o rebase pode ajudar a evitar conflitos de mesclagem, mas também pode introduzi-los se não for feito com cuidado.
Exemplo:

Imagine que você tem dois ramos: e . mainfeature

Mesclar:

Festança
git checkout main
git merge feature
Use o código com cuidado.

Raposa:

Festança
git checkout feature
git rebase main
Use o código com cuidado.

Considerações adicionais:

Force-push: Ao fazer rebase, você pode precisar forçar o push de suas alterações para o repositório remoto se o histórico tiver sido reescrito. Isso pode ser arriscado, então use com cautela.
Rebase interativo: O Git permite que você faça rebase interativamente, dando a você mais controle sobre os commits que são reproduzidos. Isso pode ser útil para limpar o histórico do seu projeto.



------------------------------------------------------Self testing
Testes fazem parte da construção do software
Devem ser realizados antes do commit
TDD pode ajudar neste processo
Desempenho bom em testes
Abordaremos o TDD (Test Drive Development). Os testes em integração contínua são sobre feedback do software, como a maioria dos métodos ágeis.


-------------------------------------------------------Build automatizado
Em resumo:

Build a cada commit
Automatização
Build independente da IDE
Todo conteúdo necessário armazenado no repositório
Em resumo:

Verifique a fase de testes e analise o código
Verifique a ordem dessas fases
Verifique a infra do build system
Use cache
Use staged build/pipeline
---------------------------------------------------------------------------Servidor de integração contínua


Existem casos por questão de tempo em que não podemos realizar todos os testes necessários ou o projeto é tão complexo que não pode ser testado integralmente em uma máquina local.

Em algum momento precisamos encontrar um local que realmente será capaz de testar todo o projeto, e este é o 
CI Daemon ou server de integração. Esse servidor irá garantir que a cada modificação seja realizado um novo teste, 
então o repositório é sempre checado e builds contínuos são uma realidade.


A prática de integração contínua não especifica que o CI Daemon é necessário, mas hoje em dia podemos considerar 
como uma obrigação nos projetos. Contudo, só porque utilizamos um server dessa natureza estamos praticando 
integração contínua, uma ação é realizada por pessoas.

O CI Daemon realiza builds contínuos e notifica os desenvolvedores se alguma alteração se deu corretamente ou não. 
Normalmente esses softwares já possui um test board que oferecem os dados do build, então as informações e relatórios são de fácil acesso.

Existem alguns serviços no mercado que podem ser instalados localmente, o Jenkins é um exemplo. 
Existem também serviços na nuvem já associados. É importante que apenas que o servidor realize 
buidls a cada commit e notifique os desenvolvedores de maneira clara e funcional.

----------------------------------------------------------------------Build quebrado
No último vídeo falamos sobre servidores de integração, e paramos no ponto em que o um erro é notificado no build. 
É importante lembrar - e devemos pensar também no conceito de entrega contínua - que o software funcional é a principal métrica que devemos nos atentar.

É tarefa de toda uma equipe resolver um problema no build o mais rápido possível, 
afinal não poderá ser realizados novos commits até que o build esteja estável e confiável novamente.

"Nobody has a higher priority task than fixing the build." -Kent Beeck

Caso o build não possa ser corrigido em um intervalo de tempo curto, 
o commit que gerou o problema deve ser desfeito para o que o projeto continue, e este é um ponto fundamental.
--------------------------------------------------------------------Certificação de CI

1. Você "comita" diariamente o seu código no "mainline" do projeto?

Sabemos que integração contínua exige esse fazer, pois devemos construir o projeto de maneira fragmentada e com feedback rápido.

2. Build e testes rodam automatizados e trazem confiança que o software está correto?

Alguns projetos possuem os testes automatizados, mas não realizam a quantidade suficiente para garantir a confiabilidade do sofware. O build pode falhar, mas a princípio os testes trazem a confiança para realizar os commits.

3. Quando um build quebra, a equipe o conserta rapidamente? Tempo ideial de 10 minutos.

Quando um bug é detectado a equipe deve se movimentar e fazer a resolução desse problema sua maior prioridade.
---------------------------------------------------------------------O que é entrega contínua?
Entrega Contínua: Um Fluxo Constante de Valor
Entrega Contínua (Continuous Delivery) é uma prática de desenvolvimento de software que visa automatizar todo o processo de levar uma aplicação desde o desenvolvimento até a produção. Em vez de grandes lançamentos infrequentes, a entrega contínua permite que pequenas mudanças sejam implantadas com frequência e segurança.

Em resumo, a entrega contínua garante que seu software esteja sempre pronto para ser lançado.

Como funciona?
A entrega contínua se baseia em uma série de práticas e ferramentas que automatizam as seguintes etapas:

Build: O código é compilado e transformado em um artefato executável.
Testes: O software passa por uma bateria de testes automatizados para garantir sua qualidade.
Deployment: O artefato é empacotado e preparado para ser implantado em um ambiente.
Release: A nova versão é liberada para os usuários, seja em produção ou em um ambiente de staging.
Cada etapa é automatizada e integrada em um pipeline de entrega contínua. Isso significa que, a cada alteração no código, o pipeline é acionado automaticamente, realizando todas as etapas de forma rápida e confiável.

Benefícios da Entrega Contínua
Redução do tempo de lançamento: Novas funcionalidades chegam mais rápido aos usuários.
Melhoria da qualidade do software: Testes automatizados garantem que o software esteja sempre funcionando corretamente.
Menor risco de falhas: A implantação de pequenas mudanças reduz o impacto de possíveis problemas.
Aumento da produtividade: A equipe de desenvolvimento pode se concentrar em criar novas funcionalidades, em vez de se preocupar com tarefas repetitivas.
Maior satisfação do cliente: Novas funcionalidades e correções de bugs são entregues com mais frequência, aumentando a satisfação dos usuários.
Conceitos Relacionados
Integração Contínua (Continuous Integration): Prática de integrar frequentemente as alterações de código em um repositório central.
Deployment Contínuo: Extensão da entrega contínua, onde todas as alterações que passam nos testes são automaticamente implantadas em produção.
DevOps: Conjunto de práticas que visam a colaboração entre equipes de desenvolvimento e operações.
Ferramentas para Entrega Contínua
Existem diversas ferramentas que podem ser utilizadas para implementar a entrega contínua, como:

Jenkins: Ferramenta de automação de construção e implantação.
GitLab CI/CD: Plataforma de desenvolvimento de software que inclui ferramentas para CI/CD.
CircleCI: Plataforma de CI/CD na nuvem.
GitHub Actions: Plataforma de CI/CD integrada ao GitHub.
Em resumo, a entrega contínua é uma prática fundamental para qualquer equipe de desenvolvimento que busca entregar software de alta qualidade com rapidez e segurança.

Gostaria de saber mais sobre algum aspecto específico da entrega contínua? Por exemplo, posso explicar como configurar um 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
"Working software over comprehensive documentation"

Um softawere funcional é mais importante do que uma documentação enorme. Mas o que significa um software funcional?

Novamente observaremos outra citação do manifesto ágil:

"Our highest priority is to satisfy the customer through early and continuous delivery of valuable software."

A prioridade mais alta é deixar o cliente satisfeito, e isso é feito por meio de entrega contínua. Isto é, um software funcional é aquele usado pelo cliente com suas novas features de maneira confiável. A integração contínua é uma parte fundamental para se chegar à entrega contínua.

Ao revisitarmos a metáfora do botão de integração em que tudo é simples e automatizado, devemos ter um outro botão de "release", isto é, de deploy.

Qual alteração que chega em nosso trunk principal e pode entrar em produção? Obviamente existem decisões de negócio sobre lançar novas features, como esperar datas comerciais importantes. Mas na visão técnica, devemos saber quais são as modificações aplicáveis.

A entrega contínua é um assunto para um próximo curso, mas sobrevoaremos alguns conceitos e suas principais características.

Dentro da arquitetura da aplicação, é anexado um novo requisito funcional: "deployability". Esta característica deveria ser pensada desde o início, pois devemos entregar com frequência o software funcional.

Um deployment pipeline é um fluxo em que o artefato passa e cada etapa incrementa e agrega mais segurança ao se aproximar do ambiente de produção.

Deploys de baixo risco são aqueles experimentais, contínuos, atualizações pontuais acompanhadas. Devemos separar a ideia de "deploy" e "publicação".Otimizar para resiliência é prevenir erros. No contexto de integração e entrega contínua temos o deploy contínuo.

As equipes de desenvolvimento normalmente possuem divisões, como as pessoas do QA,deploy e operações. As tarefas são delegadas para os subgrupos durante o projeto. Equipes separadas que mal se comunicam dificultam o andamento do trabalho, aumentam a possibilidade de problemas e atrasam os deploys.

A entrega contínua também exige uma mudança no comportamento e na cultura da empresa: as pessoas precisam trabalhar integradas.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

















